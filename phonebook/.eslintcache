[{"/home/ashermanli/dev/fullstackopen/phonebook/src/index.js":"1","/home/ashermanli/dev/fullstackopen/phonebook/src/App.js":"2","/home/ashermanli/dev/fullstackopen/phonebook/src/components/Persons.js":"3","/home/ashermanli/dev/fullstackopen/phonebook/src/components/PersonForm.js":"4","/home/ashermanli/dev/fullstackopen/phonebook/src/components/Filter.js":"5","/home/ashermanli/dev/fullstackopen/phonebook/src/components/Notification.js":"6","/home/ashermanli/dev/fullstackopen/phonebook/src/services/person.js":"7"},{"size":198,"mtime":1620009514252,"results":"8","hashOfConfig":"9"},{"size":5226,"mtime":1621487385193,"results":"10","hashOfConfig":"9"},{"size":493,"mtime":1620009514252,"results":"11","hashOfConfig":"9"},{"size":527,"mtime":1620009514252,"results":"12","hashOfConfig":"9"},{"size":387,"mtime":1620009514252,"results":"13","hashOfConfig":"9"},{"size":222,"mtime":1620009514252,"results":"14","hashOfConfig":"9"},{"size":732,"mtime":1621476558369,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1kcucl7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/ashermanli/dev/fullstackopen/phonebook/src/index.js",[],["33","34"],"/home/ashermanli/dev/fullstackopen/phonebook/src/App.js",["35","36"],"import React, {useState, useEffect} from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport './index.css'\nimport axios from 'axios'\nimport personService from './services/person'\nimport { __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react'\nimport './App.css'\n\nconst App = () => {\n\n  //intitialize the state\n    const [persons, setPersons] = useState([])\n    const[newName, setNewName] = useState('add a new name')\n    const[newNumber, setNewNumber] = useState('add a phone number')\n    const [filter, setFilter] = useState('')\n    const [filteredPerson, setFilteredPerson] = useState('')\n    const [notification, setNotification] = useState('')\n    \n\n    //get data from the server\n    try{\n      useEffect(() => {\n        personService.getAll().then( initList => setPersons(initList))\n    }, [])\n  }catch(error){\n    // console.log(error)\n  }\n\n\n\n  /***************||||***************/\n  //will handle adding and updating entries\n  const handleSubmit = (e)=>{\n    e.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    //if already exists, grab the person object\n    const pers = persons.find(p => p.name === newName)\n    //change number if different from saved\n    const changedPers = {...pers, number: newNumber}\n\n    if(persons.some((person) => person.name === newName)){\n\n      console.log(persons.filter(person => person.name === newName));\n      \n      //ask the user if they wish to update the current contact\n      if(window.confirm(`Do you want to update the number for ${newName}`)=== true){\n        personService.update(pers.id, changedPers).then(newEntry => {\n          let updatedArray = persons.map(person => person.name === newName? newEntry: person)\n          console.log('updating person')\n        setPersons(updatedArray)\n        })\n\n        //set message on success\n        setNotification({message: `Entry for ${newName} has been updated`})\n        //clear message after some time\n        setTimeout(() => {\n          setNotification({name:null, status: 'neutral'})\n        }, 5000)\n\n        setNewName('')\n        setNewNumber('')\n        return\n      }\n      else return;\n  \n    }\n\n    if(newName === ''){ alert('Please type a name')\n        return\n    }\n\n    if(newNumber === ''){\n      alert('Please type a number')\n      return\n    }\n\n    //add the new person to the server\n    personService.create(newPerson)\n    .then(newPerson => {\n      setPersons(persons.concat(newPerson))\n\n    //set message on success, then clear after some time\n    setNotification({message: `${newName} has been added`})\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n    })\n    .catch(error => {\n      setNotification({error: error.response.data.error})\n      console.log(error.response.data)\n      setTimeout(() =>{\n        setNotification(null)\n      },5000)\n    })\n      \n    \n    setNewName('')\n    setNewNumber('')\n  }\n\n  /***************||||***************/\n  //remove a person from the list\n  const handleRemove = (name, id) => {\n\n   if(window.confirm(`Delete phone number for ${name}?`) === true) \n    personService.remove(id)\n    .then(del => {\n      let updatedArray = persons.filter(per => per.id !== id)\n      setPersons(updatedArray)\n    }) \n    .catch(error => {\n      //if the user does not exist, display an error\n      setNotification({error: `\"${name}\" has already been removed from the server`})\n\n      //update the list so it doesnt show the already removed person\n      setPersons(persons.filter(person => person.name !== name))\n\n      //clear the message after some time\n      setTimeout(() => {\n        setNotification(null)\n      }, 5000)\n    })\n    \n  }\n\n\n\n  //functions for dealing with the input fields. \n  const handleNewName = (e) =>{\n    // console.log(e.target.value)\n    setNewName(e.target.value)\n  }\n\n  const handleNewNumber = (e) =>{\n    // console.log(e.target.value)\n    setNewNumber(e.target.value)\n  }\n\n  const handleFilter =(e) =>{\n    setFilter(e.target.value)\n\n    //.includes checks to see if an array has the string\n    const filtered= persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n\n    setFilteredPerson(filtered)\n\n    // console.log(filtered);\n\n\n  }\n\n  return(\n    <div>\n      <h1>Phonebook</h1>\n        \n        <Notification message={notification ? notification.message? notification.message: notification.error:null} \n                      className={notification? notification.message? 'success':'error':null} />\n        <div className=\"add\">\n          <h2>Add someone new</h2>\n          <PersonForm newName = {newName} handleNewName={handleNewName} newNumber={newNumber} handleNewNumber={handleNewNumber} handleSubmit={handleSubmit}/>\n        </div>\n     \n     \n      <div className=\"number-list\">\n          <h2>Numbers</h2>\n          <Persons persons={persons} handleRemove = {handleRemove} />\n        </div>\n      \n      <div className=\"search\">\n          \n          <Filter filter={filter} filteredPerson={filteredPerson} handleFilter={handleFilter} />\n        </div>\n    </div>\n\n  )\n\n}\n\nexport default App;\n","/home/ashermanli/dev/fullstackopen/phonebook/src/components/Persons.js",[],"/home/ashermanli/dev/fullstackopen/phonebook/src/components/PersonForm.js",[],"/home/ashermanli/dev/fullstackopen/phonebook/src/components/Filter.js",[],"/home/ashermanli/dev/fullstackopen/phonebook/src/components/Notification.js",[],"/home/ashermanli/dev/fullstackopen/phonebook/src/services/person.js",["37","38","39"],"import axios from 'axios'\n\nconst baseURL = 'api/persons'\n\nconst getAll = () =>{\n    const request = axios.get(baseURL)\n\n    return request.then(response => response.data)\n}\n\nconst getPerson = (id) =>{\n    const request = axios.get(`${baseURL}/${Number(id)}`)\n}\n\nconst create = (newPerson) =>{\n    const request = axios.post(baseURL, newPerson)\n\n    return request.then(response => response.data)\n}\n\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseURL}/${id}`, newObject)\n\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseURL}/${id}`)\n\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, update, remove}",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":7,"column":8,"nodeType":"46","messageId":"47","endLine":7,"endColumn":13},{"ruleId":"44","severity":1,"message":"48","line":9,"column":10,"nodeType":"46","messageId":"47","endLine":9,"endColumn":60},{"ruleId":"44","severity":1,"message":"49","line":11,"column":7,"nodeType":"46","messageId":"47","endLine":11,"endColumn":16},{"ruleId":"44","severity":1,"message":"50","line":12,"column":11,"nodeType":"46","messageId":"47","endLine":12,"endColumn":18},{"ruleId":"51","severity":1,"message":"52","line":34,"column":1,"nodeType":"53","endLine":34,"endColumn":48},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED' is defined but never used.","'getPerson' is assigned a value but never used.","'request' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]